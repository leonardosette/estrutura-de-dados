/// matrizes esparsas ///
////////////////////////

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/// declaracao de constante ///

const int MODULO = 3;

/// declaracao de estruturas ///

struct no {
    int numero;
    struct no *proximoNo;
};

struct diretor{
    int resto;
    struct no *proximoNo;
    struct diretor *proximoDiretor;
};

///declaracao de variaveis ///

struct diretor *cabeca = NULL;


/// funcao que procura o diretor certo ///

struct diretor *procurarDiretor(int resto){
    struct diretor *ponteiro = cabeca;

    while ((ponteiro != NULL) && (ponteiro -> resto != resto)) {
        ponteiro = ponteiro -> proximoDiretor;
    }

    if (ponteiro == NULL){
    ponteiro = (struct diretor *) malloc(sizeof(struct diretor));
    ponteiro -> resto = resto;
    ponteiro -> proximoNo = NULL;
    ponteiro -> proximoDiretor = cabeca;

        cabeca = ponteiro;

    }
    return ponteiro;
};


void inserir(int numero){
    struct diretor *ponteiroDiretor = procurarDiretor(numero % MODULO);

    struct no *novoNo = (struct no *) malloc(sizeof(struct no));

    novoNo -> numero = numero;
    novoNo -> proximoNo = ponteiroDiretor -> proximoNo;

    ponteiroDiretor -> proximoNo = novoNo;
}

void imprimir(){
    struct diretor *ponteiroDiretor = cabeca;

    printf("=============Matriz Esparsa=============\n");
    while(ponteiroDiretor != NULL){
       struct no *ponteiroNo = ponteiroDiretor -> proximoNo;

        printf("%d:\t", ponteiroDiretor -> resto);
        while (ponteiroNo != NULL){
            printf("%d\t", ponteiroNo -> numero);
            ponteiroNo = ponteiroNo -> proximoNo;

       }
       printf("\n");
       ponteiroDiretor = ponteiroDiretor -> proximoDiretor;
    }
}

/// funcao que remove um no da matriz esparsa ///

void remover(int numero){
    struct diretor *ponteiroDiretor = procurarDiretor(numero % MODULO);

    if(ponteiroDiretor -> proximoNo != NULL){
        if(ponteiroDiretor -> proximoNo -> numero == numero){
            struct no *ponteiroExcluir = ponteiroDiretor -> proximoNo;
            ponteiroDiretor -> proximoNo = ponteiroDiretor -> proximoNo -> proximoNo;
            free(ponteiroExcluir);
        } else {
            //caso dificil, excluir algum nÃ³ no meio da lista
            struct no *ponteiroAnterior = ponteiroDiretor -> proximoNo;

            while((ponteiroAnterior -> proximoNo != NULL) &&
                (ponteiroAnterior -> proximoNo -> numero != numero)){
                ponteiroAnterior = ponteiroAnterior -> proximoNo;
            }

            if (ponteiroAnterior -> proximoNo != NULL){
                struct no *ponteiroExcluir = ponteiroAnterior -> proximoNo;
                ponteiroAnterior -> proximoNo = ponteiroExcluir -> proximoNo;
                free(ponteiroExcluir);
            }
        }
    }


}
int main(){
    int i = 0;
    int numero = 0;
    time_t t;
   srand((unsigned) time(&t));
        for (i = 0; i < 10 ; i++){
            inserir(rand());
        }

    imprimir();

    printf("Digite um numero para excluir ");
    scanf("%d", &numero);

    remover(numero);

    imprimir();
}
